// ============================================================
// TESTS DE LA P√ÅGINA HOME - P√ÅGINA DE INICIO/LANDING
// Testea todos los elementos visuales y funcionales de la p√°gina principal
// ============================================================

// IMPORTACIONES NECESARIAS
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';

// BrowserRouter es necesario porque Home usa Link de React Router
import { BrowserRouter } from 'react-router-dom';

// Importamos la p√°gina que vamos a testear
import Home from '../Home';

// SUITE DE TESTS PARA LA P√ÅGINA HOME
describe('Home Page', () => {
  
  // FUNCI√ìN HELPER: Renderiza Home envuelto en BrowserRouter
  // Necesitamos BrowserRouter porque la p√°gina usa el componente Link
  const renderHome = () => {
    return render(
      <BrowserRouter>
        <Home />
      </BrowserRouter>
    );
  };

  // TEST 1: Verificar que el t√≠tulo principal de la p√°gina se muestra
  it('debe renderizar el t√≠tulo principal', () => {
    // PASO 1: Renderizamos la p√°gina Home
    renderHome();
    
    // PASO 2: Buscamos el texto "Bienvenido a" (case insensitive con /i)
    expect(screen.getByText(/bienvenido a/i)).toBeInTheDocument();
    
    // PASO 3: Buscamos el nombre de la tienda
    expect(screen.getByText('GameHub')).toBeInTheDocument();
  });

  // TEST 2: Verificar que las descripciones/eslogan de la tienda aparecen
  it('debe mostrar la descripci√≥n de la tienda', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Verificamos el eslogan principal
    expect(screen.getByText(/descubre el mejor hardware gaming/i)).toBeInTheDocument();
    
    // PASO 3: Verificamos la descripci√≥n adicional
    expect(screen.getByText(/desde consolas hasta perif√©ricos pro/i)).toBeInTheDocument();
  });

  // TEST 3: Verificar el bot√≥n/enlace principal de llamada a la acci√≥n (CTA)
  it('debe tener un enlace a la p√°gina de productos', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Buscamos el bot√≥n CTA "Ver Productos"
    const productsLink = screen.getByRole('link', { name: /ver productos/i });
    
    // PASO 3: Verificamos que el bot√≥n existe
    expect(productsLink).toBeInTheDocument();
    
    // PASO 4: Verificamos que apunta a la ruta correcta
    expect(productsLink).toHaveAttribute('href', '/products');
  });

  // TEST 4: Verificar que la imagen hero/banner principal se muestra
  it('debe mostrar la imagen destacada', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Buscamos la imagen por su texto alternativo
    const heroImage = screen.getByAltText(/setup gaming/i);
    
    // PASO 3: Verificamos que la imagen existe
    expect(heroImage).toBeInTheDocument();
    
    // PASO 4: Verificamos que usa Unsplash (servicio de im√°genes)
    // stringContaining verifica que el src contiene ese texto
    expect(heroImage).toHaveAttribute('src', expect.stringContaining('unsplash.com'));
  });

  // TEST 5: Verificar que la secci√≥n de caracter√≠sticas/ventajas existe
  it('debe renderizar la secci√≥n de caracter√≠sticas', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Verificamos que el t√≠tulo de la secci√≥n aparece
    expect(screen.getByText('¬øPor qu√© elegir GameHub?')).toBeInTheDocument();
  });

  // TEST 6: Verificar que todas las caracter√≠sticas/ventajas se muestran
  it('debe mostrar todas las caracter√≠sticas de la tienda', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Definimos las caracter√≠sticas que esperamos encontrar
    const features = [
      { title: 'Env√≠o Express', icon: 'üöö' },      // Cami√≥n
      { title: 'Pago Seguro', icon: 'üîí' },         // Candado
      { title: 'Hardware Original', icon: '‚≠ê' },     // Estrella
      { title: 'Soporte Gamer', icon: 'üîß' }        // Llave inglesa
    ];
    
    // PASO 3: Verificamos que cada caracter√≠stica aparece
    // forEach itera sobre cada elemento del array
    features.forEach(feature => {
      // Verificamos el t√≠tulo de la caracter√≠stica
      expect(screen.getByText(feature.title)).toBeInTheDocument();
      
      // Verificamos el icono emoji de la caracter√≠stica
      expect(screen.getByText(feature.icon)).toBeInTheDocument();
    });
  });

  // TEST 7: Verificar las descripciones detalladas de cada caracter√≠stica
  it('debe mostrar las descripciones de las caracter√≠sticas', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Verificamos cada descripci√≥n de caracter√≠stica
    // Cada expect busca un texto espec√≠fico que describe la ventaja
    
    // Descripci√≥n del env√≠o
    expect(screen.getByText(/entrega gratuita en pedidos/i)).toBeInTheDocument();
    
    // Descripci√≥n del pago
    expect(screen.getByText(/m√∫ltiples m√©todos de pago/i)).toBeInTheDocument();
    
    // Descripci√≥n de originalidad
    expect(screen.getByText(/100% productos gaming originales/i)).toBeInTheDocument();
    
    // Descripci√≥n del soporte
    expect(screen.getByText(/asesor√≠a especializada/i)).toBeInTheDocument();
  });

  // TEST 8: Verificar el dise√±o responsivo del grid de caracter√≠sticas
  it('debe tener la estructura grid correcta para caracter√≠sticas', () => {
    // PASO 1: Renderizamos y obtenemos el container
    const { container } = renderHome();
    
    // PASO 2: Buscamos el elemento con clases de grid responsivo
    // grid-cols-2: 2 columnas en m√≥vil
    // lg:grid-cols-4: 4 columnas en pantallas grandes
    // El backslash escapa el : en el selector CSS
    const featuresGrid = container.querySelector('.grid-cols-2.lg\\:grid-cols-4');
    
    // PASO 3: Verificamos que el grid existe
    expect(featuresGrid).toBeInTheDocument();
  });

  // TEST 9: Verificar el dise√±o responsivo de la secci√≥n hero
  it('debe tener la estructura hero con grid responsivo', () => {
    // PASO 1: Renderizamos y obtenemos el container
    const { container } = renderHome();
    
    // PASO 2: Buscamos el grid del hero
    // grid-cols-1: Una columna en m√≥vil (texto e imagen apilados)
    // lg:grid-cols-2: Dos columnas en pantallas grandes (texto | imagen)
    const heroGrid = container.querySelector('.grid-cols-1.lg\\:grid-cols-2');
    
    // PASO 3: Verificamos que el grid existe
    expect(heroGrid).toBeInTheDocument();
  });

  // TEST 10: Verificar los estilos del bot√≥n de llamada a la acci√≥n
  it('debe aplicar estilos correctos al bot√≥n de CTA', () => {
    // PASO 1: Renderizamos la p√°gina
    renderHome();
    
    // PASO 2: Obtenemos el bot√≥n CTA
    const ctaButton = screen.getByRole('link', { name: /ver productos/i });
    
    // PASO 3: Verificamos las clases de Tailwind CSS
    // bg-blue-600: Fondo azul
    // hover:bg-blue-700: Fondo azul m√°s oscuro al pasar el mouse
    // text-white: Texto blanco
    expect(ctaButton).toHaveClass('bg-blue-600', 'hover:bg-blue-700', 'text-white');
  });

  // TEST 11: Verificar el estilo visual de las secciones
  it('debe tener secciones con bordes y estilos correctos', () => {
    // PASO 1: Renderizamos y obtenemos el container
    const { container } = renderHome();
    
    // PASO 2: Buscamos todas las etiquetas <section>
    const sections = container.querySelectorAll('section');
    
    // PASO 3: Verificamos que hay exactamente 2 secciones
    // Secci√≥n 1: Hero/banner
    // Secci√≥n 2: Caracter√≠sticas
    expect(sections).toHaveLength(2);
    
    // PASO 4: Verificamos que cada secci√≥n tiene los estilos correctos
    sections.forEach(section => {
      // bg-white: Fondo blanco
      // rounded-lg: Bordes redondeados
      // border: Borde visible
      expect(section).toHaveClass('bg-white', 'rounded-lg', 'border');
    });
  });
});
// FIN DE LOS TESTS DE LA P√ÅGINA HOME
